<?php

namespace afzalroq\cms\forms;

use afzalroq\cms\entities\Entities;
use afzalroq\cms\entities\front\Options;
use afzalroq\cms\entities\Items;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use afzalroq\cms\entities\front\OaI;

class ItemsSearch extends Items
{
    protected $categories;
    protected $category_labels;

    public function __set($name, $value)
    {
        $this->{$name} = $value;
    }

    public function __construct($entity, $slug = null, $config = [])
    {
        $this->categories = [];
        $this->category_labels = [];
        $caes = array_filter($entity->caes,function ($item){return $item->show_index == 1; });
        foreach ($caes as $key =>$cae){
            $name = "caes_$key";
            $this->{$name} = null;
            $this->categories[] = $name;
            $this->category_labels[$name] = $cae->collection->getName();
        }
        parent::__construct($slug, $config);
    }

    public function getAttributeLabel($attribute)
    {
        if(in_array($attribute, $this->categories)){
            return $this->category_labels[$attribute];
        }
        return parent::getAttributeLabel($attribute); // TODO: Change the autogenerated stub
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_DEFAULT] = array_merge($scenarios[self::SCENARIO_DEFAULT], $this->categories) ;
        return $scenarios;
    }

    public function rules()
    {
        $mainRules = [
            [['id', 'entity_id', 'date_0', 'date_1', 'date_2', 'date_3', 'date_4', 'status'], 'integer'],
            [['slug', 'text_1_0', 'text_1_1', 'text_1_2', 'text_1_3', 'text_1_4', 'text_2_0', 'text_2_1', 'text_2_2', 'text_2_3', 'text_2_4', 'text_3_0', 'text_3_1', 'text_3_2', 'text_3_3', 'text_3_4', 'text_4_0', 'text_4_1', 'text_4_2', 'text_4_3', 'text_4_4', 'text_5_0', 'text_5_1', 'text_5_2', 'text_5_3', 'text_5_4', 'text_6_0', 'text_6_1', 'text_6_2', 'text_6_3', 'text_6_4', 'text_7_0', 'text_7_1', 'text_7_2', 'text_7_3', 'text_7_4'], 'safe'],
        ];
        return empty($this->categories) ? $mainRules : $mainRules + [$this->categories, 'safe'];
    }



    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params, $slug)
    {
        $query = Items::find()->where(['entity_id' => (Entities::findOne(['slug' => $slug]))->id])->orderBy('id DESC');

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => Yii::$app->getModule('cms')->pageSize
            ]
        ]);

        $this->load($params);

        $this->detachBehavior('slug');
        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->++where('0=1');
            return $dataProvider;
        }

        $query->joinWith('optionsName');
        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'cms_items.entity_id' => $this->entity_id,
            'cms_items.date_0' => $this->date_0,
            'cms_items.date_1' => $this->date_1,
            'cms_items.date_2' => $this->date_2,
            'cms_items.date_3' => $this->date_3,
            'cms_items.date_4' => $this->date_4,
            'cms_items.status' => $this->status,
        ]);

        $query->andFilterWhere(['like', 'slug', $this->slug])
            ->andFilterWhere(['like', 'cms_items.text_1_0', $this->text_1_0])
            ->andFilterWhere(['like', 'cms_items.text_1_1', $this->text_1_1])
            ->andFilterWhere(['like', 'cms_items.text_1_2', $this->text_1_2])
            ->andFilterWhere(['like', 'cms_items.text_1_3', $this->text_1_3])
            ->andFilterWhere(['like', 'cms_items.text_1_4', $this->text_1_4])
            ->andFilterWhere(['like', 'cms_items.text_2_0', $this->text_2_0])
            ->andFilterWhere(['like', 'cms_items.text_2_1', $this->text_2_1])
            ->andFilterWhere(['like', 'cms_items.text_2_2', $this->text_2_2])
            ->andFilterWhere(['like', 'cms_items.text_2_3', $this->text_2_3])
            ->andFilterWhere(['like', 'cms_items.text_2_4', $this->text_2_4])
            ->andFilterWhere(['like', 'cms_items.text_3_0', $this->text_3_0])
            ->andFilterWhere(['like', 'cms_items.text_3_1', $this->text_3_1])
            ->andFilterWhere(['like', 'cms_items.text_3_2', $this->text_3_2])
            ->andFilterWhere(['like', 'cms_items.text_3_3', $this->text_3_3])
            ->andFilterWhere(['like', 'cms_items.text_3_4', $this->text_3_4])
            ->andFilterWhere(['like', 'cms_items.text_4_0', $this->text_4_0])
            ->andFilterWhere(['like', 'cms_items.text_4_1', $this->text_4_1])
            ->andFilterWhere(['like', 'cms_items.text_4_2', $this->text_4_2])
            ->andFilterWhere(['like', 'cms_items.text_4_3', $this->text_4_3])
            ->andFilterWhere(['like', 'cms_items.text_4_4', $this->text_4_4])
            ->andFilterWhere(['like', 'cms_items.text_5_0', $this->text_5_0])
            ->andFilterWhere(['like', 'cms_items.text_5_1', $this->text_5_1])
            ->andFilterWhere(['like', 'cms_items.text_5_2', $this->text_5_2])
            ->andFilterWhere(['like', 'cms_items.text_5_3', $this->text_5_3])
            ->andFilterWhere(['like', 'cms_items.text_5_4', $this->text_5_4])
            ->andFilterWhere(['like', 'cms_items.text_6_0', $this->text_6_0])
            ->andFilterWhere(['like', 'cms_items.text_6_1', $this->text_6_1])
            ->andFilterWhere(['like', 'cms_items.text_6_2', $this->text_6_2])
            ->andFilterWhere(['like', 'cms_items.text_6_3', $this->text_6_3])
            ->andFilterWhere(['like', 'cms_items.text_6_4', $this->text_6_4])
            ->andFilterWhere(['like', 'cms_items.text_7_0', $this->text_7_0])
            ->andFilterWhere(['like', 'cms_items.text_7_1', $this->text_7_1])
            ->andFilterWhere(['like', 'cms_items.text_7_2', $this->text_7_2])
            ->andFilterWhere(['like', 'cms_items.text_7_3', $this->text_7_3])
            ->andFilterWhere(['like', 'cms_items.text_7_4', $this->text_7_4]);

        foreach ($this->categories as $key => $category) {
            if (!empty($this->$category)) {
                $id = explode('_', $this->$category)[1];
                $option = Options::findOne($id);
                $query->andWhere(['cms_items.id' => OaI::getItemIdsByOption($option->slug)]);
            };
        }
        return $dataProvider;

    }
}
